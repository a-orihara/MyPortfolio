// 1
{ 
  // 2
  "extends": [
    // "next"="eslint-config-next"
    "next",
    // Core Web Vitalsのルールを追加。
    "next/core-web-vitals",
    "eslint:recommended",
    // 3
    // 現在非推奨?
    // "plugin:prettier/recommended",
    "plugin:react/recommended",
    // "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "prettier"
  ],

  // 3
  "rules": {
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off"
  }
}

// =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =
// 1
// ESLintの設定ファイル。デフォルトでeslint-config-nextの設定が適用されている。
// また、Next.js にデフォルトで搭載されたESLintでは、lintコマンドの対象ディレクトリが、
// 3つ（pages、lib、components）に限定されています。

// extends に指定した配列の上から評価され、同一の設定項目は下にあるもので上書きされます。
// 次の順序を意識して設定すると読みやすくなります。
// 1、eslint:recommended
// 2、TypeScriptなど開発全体に関わるもの
// 3、Jestなど特定ファイルに対するもの

// -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
// 2
// extends:設定ファイルを拡張する。Extend はruleのsettingを設定できます。
// recommendedなどを使うときにextendsを使う。

// ドキュメントには下記記載
// 設定ファイルを拡張すると、他の設定ファイル（ルール、プラグイン、言語オプションを含む）の特徴をすべて継承し、
// すべてのオプションを変更することができます。

// -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
// 3
// plugin:の後にパッケージ名/設定名を指定する。
// パッケージ名は eslint-plugin- は省略し、頭にplugin:を付けた形で指定できる。
// 例：
// "plugin:react/recommended" -> "eslint-plugin-react"
// "plugin:@typescript-eslint/recommended" -> "eslint-plugin-react"

// eslint-config-prettierは、eslint-config- を省略して書く
// 例：
// eslint-config-prettier -> "prettier"

// 実際の開発においては TypeScript や Prettier など、効率を上げるためのツールを使用することが多いでしょう。
// その場合はそれぞれのツール向けの ESLint プラグインを利用しましょう。

// -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
// 4
// ESLintで独自のルールを記述する場合は、rules(その実体はコードを検証して結果をreportする関数)に記述します。
// ルールに反したものはreportするというのがESLintの大きな仕組み。


// rule(つまり静的検証する関数そのもの) を追加でき、
// ESLintはサードパーティプラグインの使用をサポートしています。プラグインを使用する前に、npm を使用してインストールする必要があります。設定ファイル内でプラグインを設定するには、プラグイン名のリストを含むpluginsキーを使用します。プラグイン名からeslint-plugin-という接頭辞を省略することができます。

// プラグインは、ESLint で使用するための追加のルールを公開することができます。
// プラグインは、ESLintで使用するための追加の環境を公開することができます。
// また、JavaScript以外のファイルをどのように処理するかをESLintに伝えるプラグインを作成することもできます。