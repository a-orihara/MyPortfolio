# Nginxの設定ファイルを自作する場合、/etc/nginx/conf.d/以下に作る。名前は任意で最後が.confで終わるように。
# e.g:/etc/nginx/conf.d/hoge.conf
# Nginxの設定ファイルはデフォルトで２つあり、以下の順番で読み込まれます。
# /etc/nginx/nginx.conf、/etc/nginx/conf.d/default.conf

# 1
# @@ こちらはプロキシ先のバックエンドのサーバーの設定 @@
# upstream:アプリケーションサーバーの指定
# このupstreamに付けたapi-appという名前はproxy_passディレクティブで再度使用。
upstream api-app {
  # api-appはこのサーバーに繋ぐという設定
  # unixドメインソケット（サーバとクライアントの二者間通信）によるコンテナ間通信をしたいので、puma.sockを指定
  server unix:///api-app/tmp/sockets/puma.sock fail_timeout=30s;
}

# @@ こちらはNginx（リバースプロシキサーバー）の設定 @@
# Nginxの設定ファイル内の「server」や「listen」、「location」などの項目を「ディレクティブ」といいます。
# serverコンテキスト({}内)に外部からのアクセス方法を記述する
# server:サーバー情報を定義。デフォルトのバーチャルホストの設定。
server {
  # listen:バーチャルホスト(IPアドレスでHTTPリクエストした場合に応答するホスト)が接続を許可するポート番号を定義。
  # 別途IPアドレス＋ポート番号の指定も可能:ex.[listen 192.0.2.1:80]
  # listen,server_nameでワンセット?
  # 2
  listen 80;
  # 3
  # server_name:ホスト名の指定。アクセスを受け付けるURLかドメインもしくはIPを指定する。
  # localホストはIPアドレスだと、通常は127.0.0.1
  # ロードバランサーのDNS or
  server_name localhost;
  # server_name 52.69.235.20;

  # varディレクトリ:ログファイルやキャッシュファイルなどの一時的なデータを残しおく為のディレクトリ
  # tmpディレクトリと違うのは、再起動しても残る
  # access_log:アクセスログの出力先を設定 (/var/log配下だとわかりやすい)*コンテナ内に作成
  access_log /var/log/nginx/access.log;

  # error_log:エラーログの出力先を設定 (/var/log配下だとわかりやすい)
  # エラーが起きたとき:cat /var/log/nginx/error.logを見てデバッグしましょう
  error_log  /var/log/nginx/error.log;

  # root:アプリのルートディレクトリ(公開するディレクトリ)を定義。ドキュメントルートの指定
  # ドキュメントルートとは、Webサーバにアクセスがあった際に参照するディレクトリのことです。
  # 静的ファイル（画像など）のパスをドキュメントルートに設定
  # 静的コンテンツは「(Railsアプリケーションのルート)\public\」ディレクトリに格納されています。
  root /api-app/public;

  # Nginxが受信可能なリクエストボディの量を指定
  client_max_body_size 100m;

  # error_page:ステータスコードに応じて表示するページを指定
  error_page 404             /404.html;
  error_page 505 502 503 504 /500.html;

  # try_files:ファイルが存在するかを確認。引数3つ。何もなければ@api-app(puma)へ
  # 5
  try_files  $uri/index.html $uri @api-app;

  # HTTP通信のタイムアウトを待つ秒数を指定
  keepalive_timeout 5;

  # @@ リバースプロキシ関連の設定 @@

  
  # 4
  # serverコンテキスト内のlocationディレクティブ
  # location /:全てのパスが一致
  location / {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    # front:doxker-composeのサービス（コンテナ）名
    # [localhost:/]に来たら、frontサービスコンテナの3000番ポートと接続
    proxy_pass http://front:3000/;
  }

  # location @api-app {
  #   # proxy_set_header:アプリケーションサーバーに送信するヘッダを定義
  #   # X-Real-IP $remote_addr:X-Real-IPで送信元を判別、$remote_addrで送信元IPを取得
  #   proxy_set_header X-Real-IP $remote_addr;
  #   # X-Forwarded-For $proxy_add_x_forwarded_for:リクエストが経由したアドレス全てを指定
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #   # Host $http_host:ユーザーリクエストに含まれるホスト名を指定
  #   proxy_set_header Host $http_host;
  #   # proxy_pass:転送先URIまたは転送先のupstreamの名前を指定(転送先サーバー)し、リクエストを転送先URIにプロキシする。
  #   # 今回はupstreamでapi-appとして定義した[unix:///api-app/tmp/sockets/puma.sock]に転送。
  #   proxy_pass http://api-app;
  # }

  location /backend {
    # proxy_set_header:アプリケーションサーバーに送信するヘッダを定義
    # X-Real-IP $remote_addr:X-Real-IPで送信元を判別、$remote_addrで送信元IPを取得
    proxy_set_header X-Real-IP $remote_addr;
    # X-Forwarded-For $proxy_add_x_forwarded_for:リクエストが経由したアドレス全てを指定
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # Host $http_host:ユーザーリクエストに含まれるホスト名を指定
    proxy_set_header Host $http_host;
    # proxy_pass:転送先URIまたは転送先のupstreamの名前を指定(転送先サーバー)し、リクエストを転送先URIにプロキシする。
    # 今回はupstreamでapi-appとして定義した[unix:///api-app/tmp/sockets/puma.sock]に転送。
    proxy_pass http://api-app:3000;
  }

  location /_next/webpack-hmr {
    proxy_pass http://front:3000/_next/webpack-hmr;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
  
}

# =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =
# 1
# Unixドメインソケットの設定
# upstreamコンテキストは、バックエンドのアプリサーバーを示すもので、サーバーのipアドレスとポート番号を
# 並べたserverディレクティブを並べて記載し、まとめたものに名前を付ける。

# upstream:アプリケーションサーバーの指定(バックエンドのアプリケーションサーバPumaとUnixドメインソケット
# 通信で接続する場合は、puma.sock を指定すればOK)。
# puma.rbのソケット設定(puma.sock)の絶対パスを記載。

# *ソケット＝ざっくりネットワークとの接続の出入り口。機器間の通信やプロセス(プログラムの処理)間の通信に使用
# されるインターフェイス。
# *ソケット通信＝ソケットを利用した、外部のネットワークに繋がるインタフェースに接続する、サーバとクライアント
# の二者間通信。
# *Unixドメインソケット＝カーネル内部で完結する高速なネットワークインタフェースを作成し、ウェブサーバやアプリ
# サーバーとNGINXなどのリバースプロキシとの間、あるいはウェブサーバとデータベースとの間の接続を高速にできる。

# サーバ（要求を待ち続けるコンピュータ）の中の実行中のプログラムは、通常サーバーソケットと
# データ送受信用のソケットの二つにバインドされる。
# 別のパソコンからサーバーへ通信を開始したい時には、まずアクセスする際は、サーバソケットに対して、通信を投げる。
# サーバソケットから別のパソコンへの返信には、データ送受信用ソケットに関する情報が含まれているのが普通。
# それを受けた別のパソコンは、サーバとデータの送受信が出来るようになる。
# ここでソケットと実行中のプログラムを結びつける事をバインドと言う
# サーバーのIPアドレス（あるいはサイト名）とサーバーソケットのポート番号を指定して通信を開始する
# データ送受信用ソケットは状況に応じて増えたり減ったりする

# ここのapi-appはDockerfileで記述したWORKDIR /api-app

# ソケット通信とは
# インターネットはTCP/IPと呼ぶ通信プロトコルを利用しますが、そのTCP/IPをプログラムから利用するには、
# プログラムの世界とTCP/IPの世界を結ぶ特別な出入り口が必要となります。 
# その出入り口となるのがソケット(Socket)であり、TCP/IPのプログラミング上の大きな特徴とのことで、
# 普段利用しているHTTP通信もソケット通信

# Unixドメインソケット:
# 「UNIXドメインソケット」とは、LinuxなどのUNIX系OS（オペレーティングシステム）
# で実行されるプロセス間のデータ通信の終点に使われるインターフェースのことをいう。LinuxなどのUNIX系OSは、
# 各種デバイスの入出力にデバイスファイルというインターフェースを利用するため、
# 一般のファイルを読み書きするのと同じ手順で周辺機器を操作できる。ところが、プロセス同士がネットワーク経由で通信するときには、
# ファイル・インターフェースを拡張した「ソケット」というインターフェースが必要になる。
# 通常インターネットで利用しているソケット通信（INETドメインソケット通信）とは異なり、
# ネットワーク経由ではないローカルマシン上のプロセスが利用するソケットが、UNIXドメインソケットである。

# Nginxのバーチャルホスト
# 同一のサーバで複数のドメインを振り分けるには、バーチャルホストという仕組みを用います。 
# バーチャルホストとは、ドメイン毎にサーバーの処理を振り分けるものです。 ドメイン毎に違う処理を行うので、
# あたかも複数のサーバに見える(仮想的)、というのが名前の由縁なのだと思います。
# バーチャルホストは、一台のサーバーで仮想的に複数のドメインを運用するサーバー技術の一種で、
# 主にメールサーバーやWebサーバーなどで利用されています。
# メールサーバーやWebサーバーを運営する場合、一般的にドメインの数を上回るサーバーを用意することが多いのですが、
# バーチャルホスト機能を利用することで、1つのサーバー上で複数ドメインを同時に運用することができるようになります。
# このため、IPアドレスの節約効果やサーバー機器を減らすことで運用コストの削減などのメリットがあります。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# 2
# iPアドレスのデフォルト値はすべてのインターフェイスアドレスを意味する"*"であり、ポート番号のデフォルト値
# は"80"になります。そのため、listenディレクティブを省略すると、次の設定と同じになります。
# listen *:80;
# この設定は次のそれぞれの設定と同じ意味を持ちます。
# listen 80;
# listen *;

# 一番上に設定した
# server {
#     listen 80;
#     server_name www.test.jp  w3.test.jp;
#     ...
# }
# が特に指定しない場合、デフォルトサーバーになる。
# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# 3
# server_nameディレクティブにはバーチャルサーバの名前を設定します。
# 仮にバーチャルサーバの名前を[server_name example.com]として、ウェブブラウザがウェブサーバに、
# リクエスト先のサーバーのホスト名を"example.com"と指定したリクエストを送った場合、nginxはこのリク
# エストを受け取ると、このホスト名がserver_nameディレクティブに設定したサーバ名に一致するserverディレク
# ティブのバーチャルサーバを選び、そのserverディレクティブ内の設定が適応されます。このようにserver_name
# ディレクティブは名前ベースのバーチャルサーバを設定するために使われます。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# 4
# locationディレクティブ
# locationディレクティブは、引数に指定されたパス名に対応するコンテキストを作る。複数の書式あり。
# [location パス名]という書式は前方一致（語頭部分以下は全て任意）させる書式。
# ex.[location / ]:すべてのパスが一致
# ex.[location /files/ ]:/files/で始まるすべてのパスが一致

# locationディレクティブではURIのパス毎の設定を記述できます。括弧{ }で囲まれた部分がlocationコンテキスト
# になります。リクエストURIのパスがこのlocationディレクティブのパスの条件に一致した場合にこのlocationコン
# テキストに記述した設定が適応されます。パスの条件の評価方法は前方一致と正規表現の2つです。
# locationディレクティブではURIのパスの代わりに@の後に名前を付けることにより、名前付きロケーションを作ること
# ができます。この名前付きロケーションは内部リダイレクトで使用します。
# 普通のリダイレクト（HTTPリクエストの達成に追加処理が必要なときに返される）はレスポンスコード（３桁の数字）に
# 301や302を、Locationヘッダフィールドにリダイレクト先のURIを指定して返し、クライアントはそのURIに対して再び
# リクエストを送ります。これとは別に内部リダイレクトというものがあります。これは、レスポンスコードに301や302を
# 指定せずに、内部的にURIのパスの書き換えを行い、その結果のページの内容を返します。クライアントから見るとリダイ
# レクトしているようには見えません。nginxではこのような内部リダイレクトがよく使われます。
# indexディレクティブ、error_pageディレクティブ、tri_filesディレクティブではこの内部リダイレクトが使われます。
# 内部リダイレクトではリダイレクト先のパスに対して毎回locationディレクティブの評価が行われます。なお、この名前
# 付きロケーションはserverコンテキストにしか記述できません。
# 今回の例では、リクエストURIのパスの先頭が"@api-app"に一致した場合に適応されます。
# *パスの一致条件が少々複雑なので注意。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# 5
# try_filesディレクティブには存在をチェックするファイルやディレクトリと存在しなかったときにリダイレクトする
# URIのパスを指定します。記述方法は次の通りです。
# [try_files ファイル ... パス;]
# [try_files ファイル ... =コード;]
# try_filesという名前の通り、指定したファイルやディレクトリの存在を順番に調べ、存在すれば、そのファイルやディ
# レクトリに対応したファイルを返します。一つも存在しなかったら、最後に記述したパスに内部リダイレクトします。
# パスの代わりに名前付きロケーション（@名前）を指定することもできます。"=コード"を指定したときには指定した
# 応答コードが返されます。このtry_filesディレクティブはバックエンドのウェブアプリケーションと連携するため
# によく使われます。

# ドキュメントルート配下を以下の先頭からファイルが存在するか順番に辿る。指定したファイルパスがある場合は
# リダイレクト、ない場合はその次のファイルパスへと繰り返し、最後までない場合は最後に指定されたURI(@api-app
# :webアプリケーション)へとリダイレクト。
# $: 変数を展開している。Nginxではもともと定義されている予約語的な変数がある。今回はほとんど予約語を使っている。
